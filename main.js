!function(){var e={588:function(e,t,r){function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}var o=function(e){"use strict";var t,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function l(e,t,r,n){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),a=new O(n||[]);return i._invoke=function(e,t,r){var n=p;return function(o,i){if(n===d)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return j()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=L(a,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===p)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=d;var c=f(e,t,r);if("normal"===c.type){if(n=r.done?y:h,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n=y,r.method="throw",r.arg=c.arg)}}}(e,r,a),i}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var p="suspendedStart",h="suspendedYield",d="executing",y="completed",v={};function m(){}function _(){}function b(){}var g={};s(g,a,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(I([])));k&&k!==r&&o.call(k,a)&&(g=k);var x=b.prototype=m.prototype=Object.create(g);function E(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function r(i,a,u,c){var s=f(e[i],e,a);if("throw"!==s.type){var l=s.arg,p=l.value;return p&&"object"===n(p)&&o.call(p,"__await")?t.resolve(p.__await).then((function(e){r("next",e,u,c)}),(function(e){r("throw",e,u,c)})):t.resolve(p).then((function(e){l.value=e,u(l)}),(function(e){return r("throw",e,u,c)}))}c(s.arg)}var i;this._invoke=function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}}function L(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,L(e,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=f(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,v;var i=o.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function I(e){if(e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,i=function r(){for(;++n<e.length;)if(o.call(e,n))return r.value=e[n],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:j}}function j(){return{value:t,done:!0}}return _.prototype=b,s(x,"constructor",b),s(b,"constructor",_),_.displayName=s(b,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===_||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s(e,c,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},E(S.prototype),s(S.prototype,u,(function(){return this})),e.AsyncIterator=S,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new S(l(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},E(x),s(x,c,"Generator"),s(x,a,(function(){return this})),s(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=I,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(R),!e)for(var r in this)"t"===r.charAt(0)&&o.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function n(n,o){return u.type="throw",u.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),R(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;R(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:I(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),v}},e}("object"===n(e=r.nmd(e))?e.exports:{});try{regeneratorRuntime=o}catch(e){"object"===("undefined"==typeof globalThis?"undefined":n(globalThis))?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}},937:function(e,t,r){"use strict";e.exports=r.p+"4e8e0a1d604782a0dff8.svg"}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,loaded:!1,exports:{}};return e[n](i,i.exports,r),i.loaded=!0,i.exports}r.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},r.p="",function(){"use strict";r(588);var e=document.getElementById("avatar_image"),t=document.getElementById("logo-icon"),n=document.querySelector(".popup-menu__input_type_name"),o=document.querySelector(".popup-menu__input_type_title"),i=document.querySelector(".profile-menu__full-name"),a=document.querySelector(".profile-menu__title"),u=document.querySelector(".profile-menu__edit-button"),c=document.querySelector("#input_type_card_name"),s=document.querySelector(".popup-menu__input_type_url"),l=document.querySelector(".profile-menu__add-button"),f=document.querySelector("#profile-form"),p=document.querySelector("#add-card-form"),h=document.querySelector("#change-pic-form"),d=document.querySelector(".profile-menu__avatar-button"),y=document.querySelector("#input_type_card_pic_url"),v=document.querySelector("#add-card_save-button"),m=document.querySelector("#edit-profile_save-button"),_=document.querySelector("#change-avatar_button"),b=document.querySelector("#delete-confirm_button"),g={formSelector:".popup-menu__submit-form",inputSelector:".popup-menu__input",submitButtonSelector:".popup-menu__save-button",inactiveButtonClass:"popup-menu__save-button_disabled",inputErrorClass:"popup-menu__input_type_error",errorClass:"popup-menu__error_visible"};function w(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function k(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){w(i,n,o,a,u,"next",e)}function u(e){w(i,n,o,a,u,"throw",e)}a(void 0)}))}}function x(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var E=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.baseUrl,this._token=t.token,this._headers={authorization:this._token,"Content-type":"application/json"}}var t,r,n,o,i,a,u,c,s,l,f;return t=e,r=[{key:"_checkResponse",value:function(e){if(e.ok)return e.json();console.log("Something went wrong",e.status,e.statusText)}},{key:"getInitialCards",value:(f=k(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards"),{headers:this._headers});case 2:return t=e.sent,e.abrupt("return",this._checkResponse(t));case 4:case"end":return e.stop()}}),e,this)}))),function(){return f.apply(this,arguments)})},{key:"getUserInfo",value:(l=k(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me"),{headers:this._headers});case 2:return t=e.sent,e.abrupt("return",this._checkResponse(t));case 4:case"end":return e.stop()}}),e,this)}))),function(){return l.apply(this,arguments)})},{key:"editUserInfo",value:(s=k(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})});case 2:return n=e.sent,e.abrupt("return",this._checkResponse(n));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return s.apply(this,arguments)})},{key:"uploadUserCard",value:(c=k(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})});case 2:return n=e.sent,e.abrupt("return",this._checkResponse(n));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return c.apply(this,arguments)})},{key:"addCard",value:(u=k(regeneratorRuntime.mark((function e(t,r){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:{name:t,link:r}});case 2:return n=e.sent,e.abrupt("return",this._checkResponse(n));case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return u.apply(this,arguments)})},{key:"deleteCard",value:(a=k(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/").concat(t),{method:"DELETE",headers:this._headers});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return a.apply(this,arguments)})},{key:"like",value:(i=k(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"PUT",headers:this._headers});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return i.apply(this,arguments)})},{key:"dislike",value:(o=k(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/cards/likes/").concat(t),{method:"DELETE",headers:this._headers});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return o.apply(this,arguments)})},{key:"setUserAvatar",value:(n=k(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})});case 2:return r=e.sent,e.abrupt("return",this._checkResponse(r));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})}],r&&x(t.prototype,r),e}();function S(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var C=function(){function e(t,r,n,o,i,a,u){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t.name,this._link=t.link,this._template=document.querySelector(r).content.querySelector(".card"),this._onImageClick=n,this._likes=t.likes,this._ownerId=t.owner._id,this._cardId=t._id,this._addLike=o,this._removeLike=i,this._openDeleteConfirmPopup=a,this._myId=u._profileId}var t,r;return t=e,r=[{key:"_setEventListeners",value:function(){var e=this;this._likeBtn=this._element.querySelector(".card__like-button"),this._trashBtn=this._element.querySelector(".card__erase"),this._element.querySelector(".card__image").addEventListener("click",(function(){e._handleCardImagePopupButton()})),this._likeBtn.addEventListener("click",function(){var t,r=(t=regeneratorRuntime.mark((function t(r){var n,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e._likeBtn.classList.contains("card__like-button_active")){t.next=14;break}return t.prev=1,t.next=4,e._addLike(e._cardId);case 4:(n=t.sent)&&(e._getLikeCount(n),r.target.classList.add("card__like-button_active"),e._element.querySelector(".card__like-count").textContent=n.length,e._element.querySelector(".card__like-count").style.display="block"),t.next=12;break;case 8:t.prev=8,t.t0=t.catch(1),alert(t.t0),console.log(t.t0);case 12:t.next=25;break;case 14:return t.prev=14,t.next=17,e._removeLike(e._cardId);case 17:(o=t.sent)&&(e._getLikeCount(o),r.target.classList.remove("card__like-button_active"),e._element.querySelector(".card__like-count").textContent=o.length,e._element.querySelector(".card__like-count").style.display="none"),t.next=25;break;case 21:t.prev=21,t.t1=t.catch(14),alert(t.t1),console.log(t.t1);case 25:case"end":return t.stop()}}),t,null,[[1,8],[14,21]])})),function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(e){S(i,n,o,a,u,"next",e)}function u(e){S(i,n,o,a,u,"throw",e)}a(void 0)}))});return function(e){return r.apply(this,arguments)}}()),this._trashBtn.addEventListener("click",(function(){e._openDeleteConfirmPopup(e._element,e._cardId)}))}},{key:"_getLikeCount",value:function(e){this._likeCount=e.length}},{key:"_getUserLikes",value:function(){var e=this;this._likes.forEach((function(t){t._id===e._myId&&e._likeBtn.classList.add("card__like-button_active")}))}},{key:"_handleCardImagePopupButton",value:function(){this._onImageClick({link:this._link,text:this._name})}},{key:"renderCard",value:function(){return this._element=this._template.cloneNode(!0),this._likeCount=this._element.querySelector(".card__like-count"),this._cardImage=this._element.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._element.querySelector(".card__text").textContent=this._name,this._likes.length>0?(this._likeCount.textContent=this._likes.length,this._likeCount.style.display="block"):this._likeCount.style.display="none",this._ownerId!==this._myId?this._element.querySelector(".card__erase").style.display="none":this._element.querySelector(".card__erase").style.display="block",this._setEventListeners(),this._getUserLikes(),this._element}}],r&&L(t.prototype,r),e}(),R=r(937);function O(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var I=function(){function e(t){var r,n,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n=function(e){"Escape"===e.key&&o.close()},(r="_handleEscClose")in this?Object.defineProperty(this,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[r]=n,this._popup=document.querySelector(t)}var t,r;return t=e,(r=[{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup-menu")||t.target.classList.contains("popup-menu__close-button"))&&e.close()}))}},{key:"open",value:function(){this._popup.classList.add("popup-menu_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup-menu_opened"),document.removeEventListener("keydown",this._handleEscClose)}}])&&O(t.prototype,r),e}();function j(e){return j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j(e)}function P(e,t){return P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},P(e,t)}function q(e,t){if(t&&("object"===j(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return T(e)}function T(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function B(){return B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=D(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},B.apply(this,arguments)}function D(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=A(e)););return e}function A(e){return A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},A(e)}var U=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(o,e);var t,r,n=(t=o,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=A(t);if(r){var o=A(this).constructor;e=Reflect.construct(n,arguments,o)}else e=n.apply(this,arguments);return q(this,e)});function o(e){var t,r,i,a,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),u=function(e){var n=e.link,i=e.text,a=r._popup.querySelector(".popup-menu__image"),u=r._popup.querySelector(".popup-menu__text");a.src=n,a.alt="Image ".concat(n),u.textContent=i,B((t=T(r),A(o.prototype)),"open",t).call(t)},(a="open")in(i=T(r=n.call(this,e)))?Object.defineProperty(i,a,{value:u,enumerable:!0,configurable:!0,writable:!0}):i.open=u,r}return o}(I);function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function V(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function F(){return F="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=G(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},F.apply(this,arguments)}function G(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=H(e)););return e}function J(e,t){return J=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},J(e,t)}function M(e,t){if(t&&("object"===N(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function H(e){return H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},H(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&J(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=H(n);if(o){var r=H(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return M(this,e)});function a(e,t){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e))._formSubmit=t,r._inputList=r._popup.querySelectorAll(".popup-menu__input"),r._submitForm=r._popup.querySelector(".popup-menu__submit-form"),r}return t=a,(r=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){return e[t.name]=t.value})),e}},{key:"close",value:function(){F(H(a.prototype),"close",this).call(this),this._submitForm.reset()}},{key:"setEventListeners",value:function(){var e=this;F(H(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._formSubmit(e._getInputValues())}))}}])&&V(t.prototype,r),a}(I);function $(e){return $="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},$(e)}function z(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function K(){return K="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=Q(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},K.apply(this,arguments)}function Q(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Z(e)););return e}function W(e,t){return W=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},W(e,t)}function X(e,t){if(t&&("object"===$(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function Z(e){return Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Z(e)}var ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&W(e,t)}(a,e);var t,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Z(n);if(o){var r=Z(this).constructor;e=Reflect.construct(t,arguments,r)}else e=t.apply(this,arguments);return X(this,e)});function a(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),i.call(this,e)}return t=a,(r=[{key:"confirmDeletion",value:function(e){this._delConfirmed=e}},{key:"setEventListeners",value:function(){var e=this;K(Z(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._delConfirmed()}))}}])&&z(t.prototype,r),a}(I);function te(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var re=function(){function e(t,r){var n=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=n,this._elementContainer=document.querySelector(r)}var t,r;return t=e,(r=[{key:"renderer",value:function(e){var t=this;e.forEach((function(e){t._element=t._renderer(e)}))}},{key:"addItem",value:function(e){this._elementContainer.prepend(e)}}])&&te(t.prototype,r),e}();function ne(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var oe=function(){function e(t){var r=t.profileName,n=t.profileDescription,o=t.avatarImage;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=r,this._profileDescription=n,this._avatarImage=o}var t,r;return t=e,(r=[{key:"getUserInfo",value:function(){return{name:this._profileName.textContent,description:this._profileDescription.textContent,avatar:this._avatarImage,id:this._profileId}}},{key:"setUserInfo",value:function(e){var t=e.name,r=e.description,n=e.avatar,o=e.id;this._profileName.textContent=t,this._profileDescription.textContent=r,this._avatarImage.src=n,this._profileId=o}}])&&ne(t.prototype,r),e}();function ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function ae(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var ue=function(){function e(t,r){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=r,this._inputElements=function(e){if(Array.isArray(e))return ie(e)}(n=this._formElement.querySelectorAll(this._inputSelector))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return ie(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?ie(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass),t.textContent=e.validationMessage}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_toggleSubmitBtn",value:function(){this._inputElements.some((function(e){return!e.validity.valid}))?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_setEventListeners",value:function(){var e=this;this._toggleSubmitBtn(),this._inputElements.forEach((function(t,r){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleSubmitBtn(t,r)}))}))}},{key:"resetValidation",value:function(){var e=this;this._toggleSubmitBtn(),this._inputElements.forEach((function(t){e._hideInputError(t)}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&ae(t.prototype,r),e}();function ce(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i=[],a=!0,u=!1;try{for(r=r.call(e);!(a=(n=r.next()).done)&&(i.push(n.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==r.return||r.return()}finally{if(u)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return se(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?se(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function se(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function le(e,t,r,n,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void r(e)}u.done?t(c):Promise.resolve(c).then(n,o)}function fe(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){le(i,n,o,a,u,"next",e)}function u(e){le(i,n,o,a,u,"throw",e)}a(void 0)}))}}var pe=new E({baseUrl:"https://around.nomoreparties.co/v1/group-12",token:"10d5550b-e17c-437f-9d04-3dde6b160e5d"});function he(){return(he=fe(regeneratorRuntime.mark((function e(){var t,r,n,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Promise.all([pe.getInitialCards(),pe.getUserInfo()]);case 3:t=e.sent,r=ce(t,2),n=r[0],(o=r[1])&&(ye.setUserInfo({name:o.name,description:o.about,avatar:o.avatar,id:o._id}),Oe.renderer(n)),e.next=14;break;case 10:e.prev=10,e.t0=e.catch(0),alert(e.t0),console.log(e.t0);case 14:case"end":return e.stop()}}),e,null,[[0,10]])})))).apply(this,arguments)}!function(){he.apply(this,arguments)}(),t.src=R;var de=new Y(".popup-menu",(function(){return ge.apply(this,arguments)}));de.setEventListeners();var ye=new oe({profileName:i,profileDescription:a,avatarImage:e}),ve=new U("#popup-menu_image");ve.setEventListeners();var me=new Y("#popup-menu_type_add-card",(function(){return we.apply(this,arguments)}));me.setEventListeners();var _e=new ee("#popup-menu_del-confirm");_e.setEventListeners();var be=new Y("#popup-menu_type_change-profilePic",(function(){return Ce.apply(this,arguments)}));function ge(){return(ge=fe(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,m.textContent="Saving...",e.next=4,pe.editUserInfo(n.value,o.value);case 4:(t=e.sent)&&(ye.setUserInfo({name:t.name,description:t.about,avatar:t.avatar,id:t._id}),de.close()),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),alert(e.t0);case 11:return e.prev=11,m.textContent="Save",e.finish(11);case 14:case"end":return e.stop()}}),e,null,[[0,8,11,14]])})))).apply(this,arguments)}function we(){return(we=fe(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,v.textContent="Creation in progress...",e.next=4,pe.uploadUserCard(c.value,s.value);case 4:t=e.sent,r=Re(t),Oe.addItem(r),me.close(),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),alert(e.t0);case 13:return e.prev=13,v.textContent="Save",e.finish(13);case 16:case"end":return e.stop()}}),e,null,[[0,10,13,16]])})))).apply(this,arguments)}function ke(e){return xe.apply(this,arguments)}function xe(){return(xe=fe(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pe.like(t);case 3:if(!(r=e.sent)){e.next=7;break}return console.log("Like was clicked",r.likes),e.abrupt("return",r.likes);case 7:e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),alert(e.t0);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})))).apply(this,arguments)}function Ee(e){return Se.apply(this,arguments)}function Se(){return(Se=fe(regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,pe.dislike(t);case 3:if(!(r=e.sent)){e.next=7;break}return console.log("Dislike was clicked",r.likes),e.abrupt("return",r.likes);case 7:e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),alert(e.t0);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})))).apply(this,arguments)}function Le(e,t){_e.open(),_e.confirmDeletion(fe(regeneratorRuntime.mark((function r(){var n;return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.prev=0,b.textContent="Deleting...",r.next=4,pe.deleteCard(t);case 4:n=r.sent,console.log(n),n&&(e.remove(),_e.close()),r.next=12;break;case 9:r.prev=9,r.t0=r.catch(0),alert(r.t0);case 12:return r.prev=12,b.textContent="Delete",r.finish(12);case 15:case"end":return r.stop()}}),r,null,[[0,9,12,15]])}))))}function Ce(){return(Ce=fe(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,_.textContent="Saving...",e.next=4,pe.setUserAvatar(y.value);case 4:(t=e.sent)&&(ye.setUserInfo({name:t.name,description:t.about,avatar:t.avatar,id:t._id}),be.close()),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),alert(e.t0);case 11:return e.prev=11,_.textContent="Save",e.finish(11);case 14:case"end":return e.stop()}}),e,null,[[0,8,11,14]])})))).apply(this,arguments)}function Re(e){return new C(e,"#card-template",ve.open,ke,Ee,Le,ye).renderCard()}be.setEventListeners(),u.addEventListener("click",(function(){var e;Ie.resetValidation(),de.open(),e=ye.getUserInfo(),n.value=e.name,o.value=e.description})),l.addEventListener("click",(function(){je.resetValidation(),me.open()})),d.addEventListener("click",(function(){Pe.resetValidation(),be.open()}));var Oe=new re({renderer:function(e){var t=Re(e);Oe.addItem(t)}},".cards__list"),Ie=new ue(g,f),je=new ue(g,p),Pe=new ue(g,h);Ie.enableValidation(),je.enableValidation(),Pe.enableValidation()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Z0JBSUdKLEdBQXVCLElBQUlwRCxHQUFjcEgsRUFBY1QsR0FDdkRtTCxHQUFvQixJQUFJdEQsR0FBY3BILEVBQWNSLEdBQ3BEbUwsR0FBc0IsSUFBSXZELEdBQWNwSCxFQUFjUCxHQUM1RCtLLEdBQXFCSyxtQkFDckJILEdBQWtCRyxtQkFDbEJGLEdBQW9CRSxtQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Db25maXJtRGVsUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvcGFnZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBkZWZpbmUoR3AsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIFwiY29uc3RydWN0b3JcIiwgR2VuZXJhdG9yRnVuY3Rpb24pO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIGRlZmluZShBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSwgYXN5bmNJdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCBpbiBtb2Rlcm4gZW5naW5lc1xuICAvLyB3ZSBjYW4gZXhwbGljaXRseSBhY2Nlc3MgZ2xvYmFsVGhpcy4gSW4gb2xkZXIgZW5naW5lcyB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjsiLCJleHBvcnQgY29uc3QgYXZhdGFySW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXZhdGFyX2ltYWdlJyk7XG5leHBvcnQgY29uc3QgbG9nb0ljb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9nby1pY29uJyk7XG5leHBvcnQgY29uc3QgbWVudUlucHV0TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1tZW51X19pbnB1dF90eXBlX25hbWUnKTtcbmV4cG9ydCBjb25zdCBtZW51SW5wdXRUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1tZW51X19pbnB1dF90eXBlX3RpdGxlJyk7XG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS1tZW51X19mdWxsLW5hbWUnKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS1tZW51X190aXRsZScpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUtbWVudV9fZWRpdC1idXR0b24nKTtcbmV4cG9ydCBjb25zdCBwb3B1cEFkZENhcmRUaXRsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2lucHV0X3R5cGVfY2FyZF9uYW1lJyk7XG5leHBvcnQgY29uc3QgcG9wdXBBZGRDYXJkVXJsSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtbWVudV9faW5wdXRfdHlwZV91cmwnKTtcbmV4cG9ydCBjb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGUtbWVudV9fYWRkLWJ1dHRvbicpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVQb3B1cEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvZmlsZS1mb3JtJyk7XG5leHBvcnQgY29uc3QgYWRkQ2FyZFBvcHVwRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtY2FyZC1mb3JtJyk7XG5leHBvcnQgY29uc3QgY2hhbmdlQXZhdGFyRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjaGFuZ2UtcGljLWZvcm0nKTtcbmV4cG9ydCBjb25zdCBwb2ZpbGVQaWNVcGRhdGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZS1tZW51X19hdmF0YXItYnV0dG9uJyk7XG5leHBvcnQgY29uc3QgcG9wdXBQcm9maWxlUGljSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5wdXRfdHlwZV9jYXJkX3BpY191cmwnKTtcbmV4cG9ydCBjb25zdCBzYXZlQnRuRm9yQWRkQ2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtY2FyZF9zYXZlLWJ1dHRvbicpO1xuZXhwb3J0IGNvbnN0IHNhdmVCdG5Gb3JFZGl0UHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0LXByb2ZpbGVfc2F2ZS1idXR0b24nKTtcbmV4cG9ydCBjb25zdCBzYXZlQnRuRm9yRWRpdFByb2ZpbGVQaWMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2hhbmdlLWF2YXRhcl9idXR0b24nKTtcbmV4cG9ydCBjb25zdCBjYXJkRGVsZXRlQ29uZmltQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RlbGV0ZS1jb25maXJtX2J1dHRvbicpO1xuXG5leHBvcnQgY29uc3QgdGVtcGxhdGVFbGVtZW50U2VsZWN0b3IgPSAoJyNjYXJkLXRlbXBsYXRlJyk7XG5leHBvcnQgY29uc3QgZm9ybVNldHRpbmdzID0ge1xuICBmb3JtU2VsZWN0b3I6IFwiLnBvcHVwLW1lbnVfX3N1Ym1pdC1mb3JtXCIsXG4gIGlucHV0U2VsZWN0b3I6IFwiLnBvcHVwLW1lbnVfX2lucHV0XCIsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5wb3B1cC1tZW51X19zYXZlLWJ1dHRvblwiLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiBcInBvcHVwLW1lbnVfX3NhdmUtYnV0dG9uX2Rpc2FibGVkXCIsXG4gIGlucHV0RXJyb3JDbGFzczogXCJwb3B1cC1tZW51X19pbnB1dF90eXBlX2Vycm9yXCIsXG4gIGVycm9yQ2xhc3M6IFwicG9wdXAtbWVudV9fZXJyb3JfdmlzaWJsZVwiXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuX3VybCA9IG9wdGlvbnMuYmFzZVVybDtcbiAgICB0aGlzLl90b2tlbiA9IG9wdGlvbnMudG9rZW47XG4gICAgdGhpcy5faGVhZGVycyA9IHsgYXV0aG9yaXphdGlvbjogdGhpcy5fdG9rZW4sICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfTtcbiAgfVxuXG4gIF9jaGVja1Jlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnU29tZXRoaW5nIHdlbnQgd3JvbmcnLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gIH1cblxuICBhc3luYyBnZXRVc2VySW5mbygpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWVgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gIH1cblxuICBhc3luYyBlZGl0VXNlckluZm8obmFtZSwgYWJvdXQpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWVgLCB7XG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBhYm91dDogYWJvdXRcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gIH1cblxuICBhc3luYyB1cGxvYWRVc2VyQ2FyZChuYW1lLCBsaW5rKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBuYW1lOiBuYW1lLCBsaW5rOiBsaW5rIH0pXG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5fY2hlY2tSZXNwb25zZShyZXNwb25zZSlcbiAgICB9XG5cblxuICBhc3luYyBhZGRDYXJkKG5hbWUsIGxpbmspIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHNgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBib2R5OiB7IG5hbWU6IG5hbWUsIGxpbms6IGxpbmsgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gIH1cblxuICBhc3luYyBkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICB9KVxuICAgIHJldHVybiB0aGlzLl9jaGVja1Jlc3BvbnNlKHJlc3BvbnNlKVxuICB9XG5cbiAgYXN5bmMgbGlrZShjYXJkSWQpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSlcbiAgICByZXR1cm4gdGhpcy5fY2hlY2tSZXNwb25zZShyZXNwb25zZSlcbiAgfVxuXG4gIGFzeW5jIGRpc2xpa2UoY2FyZElkKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gIH1cblxuICBhc3luYyBzZXRVc2VyQXZhdGFyKGxpbmspIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYXZhdGFyOiBsaW5rIH0pXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrUmVzcG9uc2UocmVzcG9uc2UpXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICBjb25zdHJ1Y3RvcihjYXJkRGF0YSwgdGVtcGxhdGVFbGVtZW50U2VsZWN0b3IsIG9uSW1hZ2VDbGljaywgYWRkTGlrZSwgcmVtb3ZlTGlrZSwgb3BlbkRlbGV0ZUNvbmZpcm1Qb3B1cCwgdXNlckluZm8pIHtcbiAgICB0aGlzLl9uYW1lID0gY2FyZERhdGEubmFtZTtcbiAgICB0aGlzLl9saW5rID0gY2FyZERhdGEubGluaztcbiAgICB0aGlzLl90ZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGVtcGxhdGVFbGVtZW50U2VsZWN0b3IpLmNvbnRlbnQucXVlcnlTZWxlY3RvcignLmNhcmQnKTtcbiAgICB0aGlzLl9vbkltYWdlQ2xpY2sgPSBvbkltYWdlQ2xpY2s7XG4gICAgdGhpcy5fbGlrZXMgPSBjYXJkRGF0YS5saWtlcztcbiAgICB0aGlzLl9vd25lcklkID0gY2FyZERhdGEub3duZXIuX2lkO1xuICAgIHRoaXMuX2NhcmRJZCA9IGNhcmREYXRhLl9pZDtcbiAgICB0aGlzLl9hZGRMaWtlID0gYWRkTGlrZTtcbiAgICB0aGlzLl9yZW1vdmVMaWtlID0gcmVtb3ZlTGlrZTtcbiAgICB0aGlzLl9vcGVuRGVsZXRlQ29uZmlybVBvcHVwID0gb3BlbkRlbGV0ZUNvbmZpcm1Qb3B1cDtcbiAgICB0aGlzLl9teUlkID0gdXNlckluZm8uX3Byb2ZpbGVJZDtcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9saWtlQnRuID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fbGlrZS1idXR0b24nKTtcbiAgICB0aGlzLl90cmFzaEJ0biA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2VyYXNlJyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19pbWFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlQ2FyZEltYWdlUG9wdXBCdXR0b24oKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2xpa2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZXZ0KSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2xpa2VCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmUnKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGxpa2VzID0gYXdhaXQgdGhpcy5fYWRkTGlrZSh0aGlzLl9jYXJkSWQpO1xuICAgICAgICAgIGlmIChsaWtlcykge1xuICAgICAgICAgICAgdGhpcy5fZ2V0TGlrZUNvdW50KGxpa2VzKTtcbiAgICAgICAgICAgIGV2dC50YXJnZXQuY2xhc3NMaXN0LmFkZCgnY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlJyk7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19saWtlLWNvdW50JykudGV4dENvbnRlbnQgPSBsaWtlcy5sZW5ndGg7IC8vdGhpcy5fbGlrZUNvdW50IGRvZXNuJ3Qgd29yayB3aXRoIHRleHRDb250ZW50XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19saWtlLWNvdW50Jykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBhbGVydChlcnIpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgbGlrZXMgPSBhd2FpdCB0aGlzLl9yZW1vdmVMaWtlKHRoaXMuX2NhcmRJZCk7XG4gICAgICAgICAgaWYgKGxpa2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9nZXRMaWtlQ291bnQobGlrZXMpO1xuICAgICAgICAgICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmUnKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2xpa2UtY291bnQnKS50ZXh0Q29udGVudCA9IGxpa2VzLmxlbmd0aDsgLy90aGlzLl9saWtlQ291bnQgZG9lc24ndCB3b3JrIHdpdGggdGV4dENvbnRlbnRcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2xpa2UtY291bnQnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgYWxlcnQoZXJyKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLl90cmFzaEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuX29wZW5EZWxldGVDb25maXJtUG9wdXAodGhpcy5fZWxlbWVudCwgdGhpcy5fY2FyZElkKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9nZXRMaWtlQ291bnQobGlrZXMpIHtcbiAgICB0aGlzLl9saWtlQ291bnQgPSBsaWtlcy5sZW5ndGg7XG4gIH1cblxuICBfZ2V0VXNlckxpa2VzKCkge1xuICAgIHRoaXMuX2xpa2VzLmZvckVhY2goKGxpa2UpID0+IHtcbiAgICAgIGlmIChsaWtlLl9pZCA9PT0gdGhpcy5fbXlJZCkge1xuICAgICAgICB0aGlzLl9saWtlQnRuLmNsYXNzTGlzdC5hZGQoJ2NhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX2hhbmRsZUNhcmRJbWFnZVBvcHVwQnV0dG9uKCkge1xuICAgIHRoaXMuX29uSW1hZ2VDbGljayh7IGxpbms6IHRoaXMuX2xpbmssIHRleHQ6IHRoaXMuX25hbWUgfSk7XG4gIH1cblxuICByZW5kZXJDYXJkKCkge1xuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl90ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgdGhpcy5fbGlrZUNvdW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fbGlrZS1jb3VudCcpO1xuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2ltYWdlJyk7XG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XG4gICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fdGV4dCcpLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcbiAgICBpZiAodGhpcy5fbGlrZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5fbGlrZUNvdW50LnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXMubGVuZ3RoO1xuICAgICAgdGhpcy5fbGlrZUNvdW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpa2VDb3VudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfVxuXG4gICAgIGlmICh0aGlzLl9vd25lcklkICE9PSB0aGlzLl9teUlkKSB7XG4gICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fZXJhc2UnKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19lcmFzZScpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgIH1cbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX2dldFVzZXJMaWtlcygpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB7XG4gICAgICBpZiAoZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BvcHVwLW1lbnUnKSB8fCBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXAtbWVudV9fY2xvc2UtYnV0dG9uJykpIHtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKCdwb3B1cC1tZW51X29wZW5lZCcpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cC1tZW51X29wZW5lZCcpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gIH1cblxuICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgIHRoaXMuY2xvc2UoKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gJy4vUG9wdXAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpXG4gIH1cblxuICBvcGVuID0gKCB7ICBsaW5rLCB0ZXh0IH0gKSA9PiB7XG4gICAgY29uc3QgcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1tZW51X19pbWFnZScpO1xuICAgIGNvbnN0IHBvcHVwSW1hZ2VUZXh0ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwLW1lbnVfX3RleHQnKTtcblxuICAgICAgcG9wdXBJbWFnZS5zcmMgPSBsaW5rO1xuICAgICAgcG9wdXBJbWFnZS5hbHQgPSBgSW1hZ2UgJHtsaW5rfWA7XG4gICAgICBwb3B1cEltYWdlVGV4dC50ZXh0Q29udGVudCA9IHRleHQ7XG5cbiAgICBzdXBlci5vcGVuKCk7XG4gIH1cblxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gJy4vUG9wdXAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBmb3JtU3VibWl0KSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fZm9ybVN1Ym1pdCA9IGZvcm1TdWJtaXQ7XG4gICAgdGhpcy5faW5wdXRMaXN0ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwLW1lbnVfX2lucHV0Jyk7XG4gICAgdGhpcy5fc3VibWl0Rm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1tZW51X19zdWJtaXQtZm9ybScpO1xuICB9XG5cbiAgX2dldElucHV0VmFsdWVzKCkge1xuICAgIGNvbnN0IGlucHV0SW5mbyA9IHt9O1xuXG4gICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goaW5wdXQgPT4gaW5wdXRJbmZvW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWUpO1xuICAgIHJldHVybiBpbnB1dEluZm87XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpO1xuICAgIHRoaXMuX3N1Ym1pdEZvcm0ucmVzZXQoKTtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9mb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbmZpcm1EZWxQb3B1cCBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICB9XG5cbiAgY29uZmlybURlbGV0aW9uKG9uU3VibWl0KSB7XG4gICAgdGhpcy5fZGVsQ29uZmlybWVkID0gb25TdWJtaXQ7XG4gIH1cblxuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHtcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX2RlbENvbmZpcm1lZCgpO1xuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoeyByZW5kZXJlciB9LCBlbGVtZW50U2VsZWN0b3IpIHtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2VsZW1lbnRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnRTZWxlY3Rvcik7XG4gIH1cbiAgcmVuZGVyZXIoY2FyZHMpIHtcbiAgICBjYXJkcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyKGVsZW1lbnQpXG4gICAgfSk7XG4gIH1cblxuICAgIGFkZEl0ZW0oZWxlbWVudCkge1xuICAgICAgdGhpcy5fZWxlbWVudENvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcbiAgY29uc3RydWN0b3IoeyBwcm9maWxlTmFtZSwgcHJvZmlsZURlc2NyaXB0aW9uLCBhdmF0YXJJbWFnZSB9KSB7XG4gICAgdGhpcy5fcHJvZmlsZU5hbWUgPSBwcm9maWxlTmFtZTtcbiAgICB0aGlzLl9wcm9maWxlRGVzY3JpcHRpb24gPSBwcm9maWxlRGVzY3JpcHRpb247XG4gICAgdGhpcy5fYXZhdGFySW1hZ2UgPSBhdmF0YXJJbWFnZTtcbiAgfVxuXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIGNvbnN0IGluZm9BYm91dFVzZXIgPSB7IG5hbWU6IHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50LCBkZXNjcmlwdGlvbjogdGhpcy5fcHJvZmlsZURlc2NyaXB0aW9uLnRleHRDb250ZW50LCBhdmF0YXI6IHRoaXMuX2F2YXRhckltYWdlLCBpZDogdGhpcy5fcHJvZmlsZUlkIH1cbiAgICByZXR1cm4gaW5mb0Fib3V0VXNlcjtcbiAgfVxuXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgZGVzY3JpcHRpb24sIGF2YXRhciwgaWQgfSkge1xuICAgIHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICB0aGlzLl9wcm9maWxlRGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLl9hdmF0YXJJbWFnZS5zcmMgPSBhdmF0YXI7XG4gICAgdGhpcy5fcHJvZmlsZUlkID0gaWQ7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3Rvcihmb3JtU2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGZvcm1TZXR0aW5ncy5pbnB1dFNlbGVjdG9yO1xuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gZm9ybVNldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBmb3JtU2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBmb3JtU2V0dGluZ3MuaW5wdXRFcnJvckNsYXNzO1xuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBmb3JtU2V0dGluZ3MuZXJyb3JDbGFzcztcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xuICAgIHRoaXMuX2lucHV0RWxlbWVudHMgPSBbLi4udGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKV07XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuICB9XG5cbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcbiAgfVxuXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuICB9XG5cbiAgX3RvZ2dsZVN1Ym1pdEJ0bigpIHtcbiAgICBjb25zdCBoYXNWYWxpZElucHV0ID0gdGhpcy5faW5wdXRFbGVtZW50cy5zb21lKChpbnB1dEVsZW1lbnQpID0+ICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpO1xuICAgIGlmIChoYXNWYWxpZElucHV0KSB7XG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCkge1xuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl90b2dnbGVTdWJtaXRCdG4oKTtcblxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoIGlucHV0RWxlbWVudCwgYnV0dG9uRWxlbWVudCApID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3RvZ2dsZVN1Ym1pdEJ0bihpbnB1dEVsZW1lbnQsIGJ1dHRvbkVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXNldFZhbGlkYXRpb24oKSB7XG4gICAgdGhpcy5fdG9nZ2xlU3VibWl0QnRuKCk7XG4gICAgdGhpcy5faW5wdXRFbGVtZW50cy5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudClcbiAgICB9KTtcbiAgfVxuXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBldnQgPT4ge1xuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbn1cbiIsImltcG9ydCAncmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lJztcbmltcG9ydCB7XG4gIGF2YXRhckltYWdlLGxvZ29JY29uLCBtZW51SW5wdXROYW1lLCBtZW51SW5wdXRUaXRsZSwgY2FyZERlbGV0ZUNvbmZpbUJ0bixcbiAgcG9wdXBBZGRDYXJkVGl0bGVJbnB1dCwgcG9wdXBBZGRDYXJkVXJsSW5wdXQsIHByb2ZpbGVOYW1lLCBwcm9maWxlRGVzY3JpcHRpb24sXG4gIHByb2ZpbGVFZGl0QnV0dG9uLCBhZGRDYXJkQnV0dG9uLCBwcm9maWxlUG9wdXBGb3JtLCBhZGRDYXJkUG9wdXBGb3JtLFxuICBjaGFuZ2VBdmF0YXJGb3JtLCB0ZW1wbGF0ZUVsZW1lbnRTZWxlY3RvciwgZm9ybVNldHRpbmdzLCBwb2ZpbGVQaWNVcGRhdGVCdXR0b24sXG4gIHBvcHVwUHJvZmlsZVBpY0lucHV0LCBzYXZlQnRuRm9yQWRkQ2FyZCwgc2F2ZUJ0bkZvckVkaXRQcm9maWxlLHNhdmVCdG5Gb3JFZGl0UHJvZmlsZVBpYyxcbn0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzLmpzJztcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xuaW1wb3J0IEFwaSBmcm9tICcuLi9jb21wb25lbnRzL0FwaS5qcyc7XG5pbXBvcnQgQ2FyZCBmcm9tICcuLi9jb21wb25lbnRzL0NhcmQuanMnO1xuaW1wb3J0IGxvZ29TcmMgZnJvbSAnLi4vaW1hZ2VzL2xvZ28uc3ZnJztcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlJztcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyc7XG5pbXBvcnQgQ29uZmlybURlbFBvcHVwIGZyb20gJy4uL2NvbXBvbmVudHMvQ29uZmlybURlbFBvcHVwLmpzJztcbmltcG9ydCBTZWN0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvU2VjdGlvbi5qcyc7XG5pbXBvcnQgVXNlckluZm8gZnJvbSAnLi4vY29tcG9uZW50cy9Vc2VySW5mby5qcyc7XG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tICcuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMnO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL0FwaSBDYWxscy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyXCIsXG4gIHRva2VuOiBcIjEwZDU1NTBiLWUxN2MtNDM3Zi05ZDA0LTNkZGU2YjE2MGU1ZFwiXG59KTtcblxuYXN5bmMgZnVuY3Rpb24gbG9hZFRoZVBhZ2UoKSB7XG4gIHRyeSB7XG4gICAgICBjb25zdCBbY2FyZHMsIHVzZXJEYXRhXSA9IGF3YWl0IFByb21pc2UuYWxsKFthcGkuZ2V0SW5pdGlhbENhcmRzKCksIGFwaS5nZXRVc2VySW5mbygpXSlcbiAgICAgIGlmICggY2FyZHMsIHVzZXJEYXRhICkge1xuICAgICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHsgbmFtZTogdXNlckRhdGEubmFtZSwgZGVzY3JpcHRpb246IHVzZXJEYXRhLmFib3V0LCBhdmF0YXI6IHVzZXJEYXRhLmF2YXRhciwgaWQ6IHVzZXJEYXRhLl9pZCB9KVxuICAgICAgICAgIGNhcmRSZW5kZXJlci5yZW5kZXJlcihjYXJkcyk7XG4gICAgICB9XG4gIH1cbiAgY2F0Y2ggKGVycikge1xuICAgIGFsZXJ0KGVycilcbiAgICBjb25zb2xlLmxvZyhlcnIpO1xuICB9XG59XG5sb2FkVGhlUGFnZSgpO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL0VuZCBvZiBBcGkgQ2FsbHMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vLyBMb2dvIGFuZCBBdmF0YXIgSW1hZ2VcbmxvZ29JY29uLnNyYyA9IGxvZ29TcmM7XG5cbi8vIHByb2ZpbGUtbmFtZSBhbmQgdGl0bGUgZWRpdCBtZW51XG5jb25zdCBwcm9maWxlUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwLW1lbnUnLCBzYXZlVXNlckluZm8pO1xucHJvZmlsZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4vLyBUaGlzIGlzIHRoZSBVc2VySW5mbyBPYmplY3RcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHsgcHJvZmlsZU5hbWUsIHByb2ZpbGVEZXNjcmlwdGlvbiwgYXZhdGFySW1hZ2UgfSk7XG4vLyBUaGlzIGlzIHRoZSBpbWFnZSBwb3B1cCBtZW51XG5leHBvcnQgY29uc3QgaW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZSgnI3BvcHVwLW1lbnVfaW1hZ2UnKTtcbmltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbi8vIFRoaXMgaXMgdGhlIGFkZC1jYXJkIG1lbnVcbmNvbnN0IHBvcHVwQWRkQ2FyZCA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjcG9wdXAtbWVudV90eXBlX2FkZC1jYXJkJywgc3VibWl0QWRkQ2FyZEZvcm0pO1xucG9wdXBBZGRDYXJkLnNldEV2ZW50TGlzdGVuZXJzKCk7XG4vLyBUaGlzIGlzIHRoZSBEZWxldGUgQ29uZmlybWF0aW9uIFBvcHVwXG5jb25zdCBwb3B1cERlbGV0ZUNvbmZpcm1hdGlvbiA9IG5ldyBDb25maXJtRGVsUG9wdXAoJyNwb3B1cC1tZW51X2RlbC1jb25maXJtJyk7XG5wb3B1cERlbGV0ZUNvbmZpcm1hdGlvbi5zZXRFdmVudExpc3RlbmVycygpO1xuLy8gVGhpcyBpcyB0aGUgQ2hhbmdlIEF2YXRhciBQb3B1cFxuY29uc3QgcG9wdXBDaGFuZ2VBdmF0YXIgPSBuZXcgUG9wdXBXaXRoRm9ybSgnI3BvcHVwLW1lbnVfdHlwZV9jaGFuZ2UtcHJvZmlsZVBpYycsIGNoYW5nZUF2YXRhcik7XG5wb3B1cENoYW5nZUF2YXRhci5zZXRFdmVudExpc3RlbmVycygpO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9GdW5jdGlvbnMvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gY3VycmVudFVzZXJJbmZvKCkge1xuICBjb25zdCB1c2VySW5mb3JtYXRpb24gPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xuICBtZW51SW5wdXROYW1lLnZhbHVlID0gdXNlckluZm9ybWF0aW9uLm5hbWU7XG4gIG1lbnVJbnB1dFRpdGxlLnZhbHVlID0gdXNlckluZm9ybWF0aW9uLmRlc2NyaXB0aW9uO1xufVxuXG5wcm9maWxlRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgcHJvZmlsZUZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XG4gIHByb2ZpbGVQb3B1cC5vcGVuKCk7XG4gIGN1cnJlbnRVc2VySW5mbygpXG59KTtcbmFzeW5jIGZ1bmN0aW9uIHNhdmVVc2VySW5mbygpIHtcbiAgdHJ5IHtcbiAgICBzYXZlQnRuRm9yRWRpdFByb2ZpbGUudGV4dENvbnRlbnQgPSAnU2F2aW5nLi4uJztcbiAgICBjb25zdCB1c2VySW5wdXRJbmZvID0gYXdhaXQgYXBpLmVkaXRVc2VySW5mbyhtZW51SW5wdXROYW1lLnZhbHVlLCBtZW51SW5wdXRUaXRsZS52YWx1ZSk7XG4gICAgaWYgKHVzZXJJbnB1dEluZm8pIHtcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHsgbmFtZTogdXNlcklucHV0SW5mby5uYW1lLCBkZXNjcmlwdGlvbjogdXNlcklucHV0SW5mby5hYm91dCwgYXZhdGFyOiB1c2VySW5wdXRJbmZvLmF2YXRhciwgaWQ6IHVzZXJJbnB1dEluZm8uX2lkIH0pO1xuICAgICAgcHJvZmlsZVBvcHVwLmNsb3NlKCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBhbGVydChlcnIpO1xuICB9XG4gIGZpbmFsbHkge1xuICAgIHNhdmVCdG5Gb3JFZGl0UHJvZmlsZS50ZXh0Q29udGVudCA9ICdTYXZlJztcbiAgfVxufVxuXG5hZGRDYXJkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICBjYXJkRm9ybVZhbGlkYXRvci5yZXNldFZhbGlkYXRpb24oKTtcbiAgcG9wdXBBZGRDYXJkLm9wZW4oKTtcbn0pO1xuYXN5bmMgZnVuY3Rpb24gc3VibWl0QWRkQ2FyZEZvcm0oKSB7XG4gIHRyeSB7XG4gICAgc2F2ZUJ0bkZvckFkZENhcmQudGV4dENvbnRlbnQgPSAnQ3JlYXRpb24gaW4gcHJvZ3Jlc3MuLi4nO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBhcGkudXBsb2FkVXNlckNhcmQocG9wdXBBZGRDYXJkVGl0bGVJbnB1dC52YWx1ZSwgcG9wdXBBZGRDYXJkVXJsSW5wdXQudmFsdWUpXG4gICAgY29uc3QgY2FyZEVsZW1lbnQgPSBjcmVhdGVDYXJkKGRhdGEpO1xuICAgIGNhcmRSZW5kZXJlci5hZGRJdGVtKGNhcmRFbGVtZW50KTtcbiAgICBwb3B1cEFkZENhcmQuY2xvc2UoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgYWxlcnQoZXJyKTtcbiAgfVxuICBmaW5hbGx5IHtcbiAgICBzYXZlQnRuRm9yQWRkQ2FyZC50ZXh0Q29udGVudCA9ICdTYXZlJztcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBhZGRMaWtlKGNhcmRJZCkge1xuICB0cnl7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkubGlrZShjYXJkSWQpO1xuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgY29uc29sZS5sb2coJ0xpa2Ugd2FzIGNsaWNrZWQnLCByZXNwb25zZS5saWtlcyk7XG4gICAgICByZXR1cm4gcmVzcG9uc2UubGlrZXM7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBhbGVydChlcnIpO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZW1vdmVMaWtlKGNhcmRJZCkge1xuICB0cnkge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5kaXNsaWtlKGNhcmRJZCk7XG4gIGlmIChyZXNwb25zZSkge1xuICAgIGNvbnNvbGUubG9nKCdEaXNsaWtlIHdhcyBjbGlja2VkJywgcmVzcG9uc2UubGlrZXMpO1xuICAgIHJldHVybiByZXNwb25zZS5saWtlcztcbiAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBhbGVydChlcnIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9wZW5EZWxldGVDb25maXJtUG9wdXAoY2FyZCwgY2FyZElkKSB7XG4gIHBvcHVwRGVsZXRlQ29uZmlybWF0aW9uLm9wZW4oKTtcbiAgcG9wdXBEZWxldGVDb25maXJtYXRpb24uY29uZmlybURlbGV0aW9uKGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY2FyZERlbGV0ZUNvbmZpbUJ0bi50ZXh0Q29udGVudCA9ICdEZWxldGluZy4uLic7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZGVsZXRlQ2FyZChjYXJkSWQpO1xuICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIGNhcmQucmVtb3ZlKCk7XG4gICAgICBwb3B1cERlbGV0ZUNvbmZpcm1hdGlvbi5jbG9zZSgpO1xuICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGFsZXJ0KGVycik7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgY2FyZERlbGV0ZUNvbmZpbUJ0bi50ZXh0Q29udGVudCA9ICdEZWxldGUnO1xuICAgIH1cbiAgfSk7XG59XG5cbnBvZmlsZVBpY1VwZGF0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgYXZhdGFyRm9ybVZhbGlkYXRvci5yZXNldFZhbGlkYXRpb24oKTtcbiAgcG9wdXBDaGFuZ2VBdmF0YXIub3BlbigpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZUF2YXRhcigpIHtcbiAgdHJ5IHtcbiAgICBzYXZlQnRuRm9yRWRpdFByb2ZpbGVQaWMudGV4dENvbnRlbnQgPSAnU2F2aW5nLi4uJztcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuc2V0VXNlckF2YXRhcihwb3B1cFByb2ZpbGVQaWNJbnB1dC52YWx1ZSk7ICAvLyBUaGlzIGlzIHRoZSBVUkwgb2YgdGhlIG5ldyBhdmF0YXJcbiAgaWYgKHJlc3BvbnNlKSB7XG4gICAgdXNlckluZm8uc2V0VXNlckluZm8oeyBuYW1lOiByZXNwb25zZS5uYW1lLCBkZXNjcmlwdGlvbjogcmVzcG9uc2UuYWJvdXQsIGF2YXRhcjogcmVzcG9uc2UuYXZhdGFyLCBpZDogcmVzcG9uc2UuX2lkIH0pO1xuICAgIHBvcHVwQ2hhbmdlQXZhdGFyLmNsb3NlKCk7XG4gIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgYWxlcnQoZXJyKTtcbiAgfVxuICBmaW5hbGx5IHtcbiAgICBzYXZlQnRuRm9yRWRpdFByb2ZpbGVQaWMudGV4dENvbnRlbnQgPSAnU2F2ZSc7XG4gIH1cbn1cblxuLy8gVGhpcyBDcmVhdGVzIHRoZSBJbml0aWFsIENhcmRzIG9uIHRoZSBQYWdlLlxuZnVuY3Rpb24gY3JlYXRlQ2FyZChjYXJkRGF0YSkge1xuICByZXR1cm4gbmV3IENhcmQoY2FyZERhdGEsIHRlbXBsYXRlRWxlbWVudFNlbGVjdG9yLCBpbWFnZVBvcHVwLm9wZW4sIGFkZExpa2UscmVtb3ZlTGlrZSwgb3BlbkRlbGV0ZUNvbmZpcm1Qb3B1cCwgdXNlckluZm8pLnJlbmRlckNhcmQoKTtcbn1cblxuY29uc3QgY2FyZFJlbmRlcmVyID0gbmV3IFNlY3Rpb24oe1xuICByZW5kZXJlcjogKGVsZW1lbnQpID0+IHtcbiAgICBjb25zdCBuZXdDYXJkID0gY3JlYXRlQ2FyZChlbGVtZW50KTtcbiAgICBjYXJkUmVuZGVyZXIuYWRkSXRlbShuZXdDYXJkKTtcbiAgfVxufSwgJy5jYXJkc19fbGlzdCcpO1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vRW5kIG9mIEZ1bmN0aW9ucy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vIFZhbGlkYXRpb25zXG5jb25zdCBwcm9maWxlRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGZvcm1TZXR0aW5ncywgcHJvZmlsZVBvcHVwRm9ybSk7XG5jb25zdCBjYXJkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKGZvcm1TZXR0aW5ncywgYWRkQ2FyZFBvcHVwRm9ybSk7XG5jb25zdCBhdmF0YXJGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoZm9ybVNldHRpbmdzLCBjaGFuZ2VBdmF0YXJGb3JtKTtcbnByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbmNhcmRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcbmF2YXRhckZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpXG4iXSwibmFtZXMiOlsicnVudGltZSIsImV4cG9ydHMiLCJ1bmRlZmluZWQiLCJPcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093biIsImhhc093blByb3BlcnR5IiwiJFN5bWJvbCIsIlN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZXJyIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjcmVhdGUiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJtZXRob2QiLCJhcmciLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkVycm9yIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJkb25lIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJmbiIsImNhbGwiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJ0aGlzIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3VsdCIsIl9fYXdhaXQiLCJ0aGVuIiwidW53cmFwcGVkIiwiZXJyb3IiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIlR5cGVFcnJvciIsImluZm8iLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImxlbmd0aCIsImkiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwia2V5cyIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwibW9kdWxlIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJpZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJubWQiLCJwYXRocyIsImNoaWxkcmVuIiwicCIsImF2YXRhckltYWdlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImxvZ29JY29uIiwibWVudUlucHV0TmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJtZW51SW5wdXRUaXRsZSIsInByb2ZpbGVOYW1lIiwicHJvZmlsZURlc2NyaXB0aW9uIiwicHJvZmlsZUVkaXRCdXR0b24iLCJwb3B1cEFkZENhcmRUaXRsZUlucHV0IiwicG9wdXBBZGRDYXJkVXJsSW5wdXQiLCJhZGRDYXJkQnV0dG9uIiwicHJvZmlsZVBvcHVwRm9ybSIsImFkZENhcmRQb3B1cEZvcm0iLCJjaGFuZ2VBdmF0YXJGb3JtIiwicG9maWxlUGljVXBkYXRlQnV0dG9uIiwicG9wdXBQcm9maWxlUGljSW5wdXQiLCJzYXZlQnRuRm9yQWRkQ2FyZCIsInNhdmVCdG5Gb3JFZGl0UHJvZmlsZSIsInNhdmVCdG5Gb3JFZGl0UHJvZmlsZVBpYyIsImNhcmREZWxldGVDb25maW1CdG4iLCJmb3JtU2V0dGluZ3MiLCJmb3JtU2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIkFwaSIsIm9wdGlvbnMiLCJfdXJsIiwiYmFzZVVybCIsIl90b2tlbiIsInRva2VuIiwiX2hlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwicmVzcG9uc2UiLCJvayIsImpzb24iLCJjb25zb2xlIiwibG9nIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImZldGNoIiwiaGVhZGVycyIsIl9jaGVja1Jlc3BvbnNlIiwiYWJvdXQiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImxpbmsiLCJjYXJkSWQiLCJhdmF0YXIiLCJDYXJkIiwiY2FyZERhdGEiLCJ0ZW1wbGF0ZUVsZW1lbnRTZWxlY3RvciIsIm9uSW1hZ2VDbGljayIsImFkZExpa2UiLCJyZW1vdmVMaWtlIiwib3BlbkRlbGV0ZUNvbmZpcm1Qb3B1cCIsInVzZXJJbmZvIiwiX25hbWUiLCJfbGluayIsIl90ZW1wbGF0ZSIsImNvbnRlbnQiLCJfb25JbWFnZUNsaWNrIiwiX2xpa2VzIiwibGlrZXMiLCJfb3duZXJJZCIsIm93bmVyIiwiX2lkIiwiX2NhcmRJZCIsIl9hZGRMaWtlIiwiX3JlbW92ZUxpa2UiLCJfb3BlbkRlbGV0ZUNvbmZpcm1Qb3B1cCIsIl9teUlkIiwiX3Byb2ZpbGVJZCIsIl9saWtlQnRuIiwiX2VsZW1lbnQiLCJfdHJhc2hCdG4iLCJhZGRFdmVudExpc3RlbmVyIiwiX2hhbmRsZUNhcmRJbWFnZVBvcHVwQnV0dG9uIiwiZXZ0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJfZ2V0TGlrZUNvdW50IiwidGFyZ2V0IiwiYWRkIiwidGV4dENvbnRlbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJhbGVydCIsInJlbW92ZSIsIl9saWtlQ291bnQiLCJsaWtlIiwidGV4dCIsImNsb25lTm9kZSIsIl9jYXJkSW1hZ2UiLCJzcmMiLCJhbHQiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfZ2V0VXNlckxpa2VzIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiY2xvc2UiLCJfcG9wdXAiLCJfaGFuZGxlRXNjQ2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiUG9wdXBXaXRoSW1hZ2UiLCJwb3B1cEltYWdlIiwicG9wdXBJbWFnZVRleHQiLCJQb3B1cFdpdGhGb3JtIiwiZm9ybVN1Ym1pdCIsIl9mb3JtU3VibWl0IiwiX2lucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJfc3VibWl0Rm9ybSIsImlucHV0SW5mbyIsImlucHV0IiwicHJldmVudERlZmF1bHQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJDb25maXJtRGVsUG9wdXAiLCJvblN1Ym1pdCIsIl9kZWxDb25maXJtZWQiLCJTZWN0aW9uIiwiZWxlbWVudFNlbGVjdG9yIiwicmVuZGVyZXIiLCJfcmVuZGVyZXIiLCJfZWxlbWVudENvbnRhaW5lciIsImNhcmRzIiwiZWxlbWVudCIsInByZXBlbmQiLCJVc2VySW5mbyIsIl9wcm9maWxlTmFtZSIsIl9wcm9maWxlRGVzY3JpcHRpb24iLCJfYXZhdGFySW1hZ2UiLCJkZXNjcmlwdGlvbiIsIkZvcm1WYWxpZGF0b3IiLCJmb3JtRWxlbWVudCIsIl9pbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJfZm9ybUVsZW1lbnQiLCJfaW5wdXRFbGVtZW50cyIsIl9idXR0b25FbGVtZW50IiwiaW5wdXRFbGVtZW50IiwiZXJyb3JFbGVtZW50IiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJzb21lIiwidmFsaWRpdHkiLCJ2YWxpZCIsImRpc2FibGVkIiwiX2hpZGVJbnB1dEVycm9yIiwiX3Nob3dJbnB1dEVycm9yIiwiX3RvZ2dsZVN1Ym1pdEJ0biIsImJ1dHRvbkVsZW1lbnQiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiYXBpIiwiYWxsIiwiZ2V0SW5pdGlhbENhcmRzIiwiZ2V0VXNlckluZm8iLCJ1c2VyRGF0YSIsInNldFVzZXJJbmZvIiwiY2FyZFJlbmRlcmVyIiwibG9hZFRoZVBhZ2UiLCJsb2dvU3JjIiwicHJvZmlsZVBvcHVwIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJpbWFnZVBvcHVwIiwicG9wdXBBZGRDYXJkIiwicG9wdXBEZWxldGVDb25maXJtYXRpb24iLCJwb3B1cENoYW5nZUF2YXRhciIsImVkaXRVc2VySW5mbyIsInVzZXJJbnB1dEluZm8iLCJ1cGxvYWRVc2VyQ2FyZCIsImRhdGEiLCJjYXJkRWxlbWVudCIsImNyZWF0ZUNhcmQiLCJhZGRJdGVtIiwiZGlzbGlrZSIsImNhcmQiLCJvcGVuIiwiY29uZmlybURlbGV0aW9uIiwiZGVsZXRlQ2FyZCIsInNldFVzZXJBdmF0YXIiLCJyZW5kZXJDYXJkIiwidXNlckluZm9ybWF0aW9uIiwicHJvZmlsZUZvcm1WYWxpZGF0b3IiLCJyZXNldFZhbGlkYXRpb24iLCJjYXJkRm9ybVZhbGlkYXRvciIsImF2YXRhckZvcm1WYWxpZGF0b3IiLCJuZXdDYXJkIiwiZW5hYmxlVmFsaWRhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=